package com.vari.clockify.check.checker;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDate;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Objects;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.ExecutionException;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
import org.springframework.boot.context.properties.ConfigurationPropertiesScan;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.autoconfigure.firestore.GcpFirestoreAutoConfiguration;
import com.google.cloud.spring.data.firestore.repository.config.EnableReactiveFirestoreRepositories;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Sets;
import com.vari.clockify.check.confpr.ClockifyConfpr;
import com.vari.clockify.check.domain.UserIdDate;
import com.vari.clockify.check.domain.document.TimeEntry;
import com.vari.clockify.check.domain.repository.DaySummaryRepository;
import com.vari.clockify.check.domain.repository.TimeEntryRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@SpringBootTest(classes = { UserIdDateEvaluatorDev.CheckerConfig.class })
@EnabledIfEnvironmentVariable(named = "ENV", matches = "dev")
class UserIdDateEvaluatorDev {

    @EnableReactiveFirestoreRepositories(basePackageClasses = UserIdDate.class)
    @ComponentScan(basePackageClasses = { UserIdDateEvaluator.class })
    @Import({ GcpFirestoreAutoConfiguration.class, GcpContextAutoConfiguration.class,
            OptionalValidatorFactoryBean.class, JacksonAutoConfiguration.class })
    @ConfigurationPropertiesScan(basePackageClasses = ClockifyConfpr.class)
    @Configuration
    public static class CheckerConfig {
    }

    UserIdDate userIdDate = new UserIdDate("5f9ed7381b69c27d1628360b", LocalDate.of(2021, 10, 8));

    @Autowired
    UserIdDateEvaluator userIdDateEvaluator;
    @Autowired
    DaySummaryRepository daySummaryRepository;
    @Autowired
    TimeEntryRepository timeEntryRepository;
    @Autowired
    Firestore firestore;

    @Test
    void test() throws JsonProcessingException, InterruptedException, ExecutionException {
        var r = firestore.collection(TimeEntry.COLLECTION_NAME)
                .whereEqualTo("userId", "")
                .whereGreaterThan("validationData.date", "")
                .orderBy("userId")
                .orderBy("validationData.date")
                .limit(1)
                .get()
                .get()
                .getDocuments();
        ;
        userIdDateEvaluator.check(userIdDate);
        var ds = daySummaryRepository.findById(userIdDate.toString()).block();
        assertThat(ds).isNotNull();
    }

    Set<String> userIds = Set.of("5f998e921f3eb40b669b8c12",
            "5f9ed7381b69c27d1628360b",
            "5f9ed7381b69c27d1628360d",
            "5f9ed7381b69c27d1628360f",
            "5f9ed7381b69c27d16283611",
            "5f9ed78e3a1dc508bbb0e029",
            "5f9ed78e3a1dc508bbb0e02d",
            "5f9ed78e3a1dc508bbb0e031",
            "5f9ed7d33a1dc508bbb0e0e8",
            "5f9ed7d33a1dc508bbb0e0ea",
            "5f9ed7d33a1dc508bbb0e0ec",
            "5f9ed7d33a1dc508bbb0e0f0",
            "5f9ed7f83a1dc508bbb0e14c",
            "5f9ed7f83a1dc508bbb0e14e",
            "5f9ef2343a1dc508bbb12120",
            "5f9fc2e2a8b95f24a7327d18",
            "5fa1377e67cee745ea77fc9f",
            "5fc8ad874d18a37055865b6b",
            "5fc8ada64d18a37055865d44",
            "603debf8e2e8bd5cb2e1aef3",
            "604a3851a3cb9e0b3d698dfb",
            "609d23dae52e901cfaa3ef6d",
            "60a7c567daabf95cb5d686bf",
            "611b7413fa783b70585813f9",
            "6124a0d98969ac1e165e2258",
            "61321f92a15c1d53ad2b61f6",
            "6135c162777d5361dce295e7",
            "615af0095ac8d77262a24096");

    @Test
    void findUserIds() {
        NavigableSet<String> userIds = getAll(new NameSupplier(firestore));
        log.info("userIds: {}", userIds);
    }

    private final Collector<String, ?, NavigableSet<String>> navigableSetCollector = Collectors.collectingAndThen(
            Collectors.toCollection(() -> new TreeSet<>(String.CASE_INSENSITIVE_ORDER)),
            Collections::unmodifiableNavigableSet);

    private NavigableSet<String> getAll(Supplier<String> s) {
        return Stream.generate(s).takeWhile(Objects::nonNull).collect(navigableSetCollector);
    }

    @RequiredArgsConstructor
    private static class NameSupplier implements Supplier<String> {
        final Firestore firestore;
        String last = "";

        @Override
        synchronized public String get() {
            try {
                Objects.requireNonNull(last);
                return last = firestore.collection(TimeEntry.COLLECTION_NAME)
                        .whereGreaterThan("userId", last)
                        .orderBy("userId")
                        .limit(1)
                        .get()
                        .get()
                        .getDocuments()
                        .stream()
                        .limit(1)
                        .map(s -> s.get("userId", String.class))
                        .findFirst()
                        .orElse(null);
            } catch (InterruptedException | ExecutionException e) {
                String m = "Cannot receive next Name after (" + last + ")";
                log.error(m, e);
                throw new RuntimeException(m, e);
            }
        }
    }

    // @formatter:off
    Map<String, NavigableSet<String>> userIdDateMap = Map.ofEntries( //
            Map.entry("5f9ed7381b69c27d1628360f", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-28", "2021-08-29", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-04", "2021-09-05", "2021-09-06", "2021-09-07", "2021-09-09", "2021-09-10", "2021-09-11", "2021-09-12", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-02", "2021-10-03"))),
            Map.entry("5f9ed7d33a1dc508bbb0e0f0", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-24", "2021-08-25", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5fa1377e67cee745ea77fc9f", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-07", "2021-07-08", "2021-07-09", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-30", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5fc8ad874d18a37055865b6b", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-07", "2021-07-08", "2021-07-09", "2021-07-11", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("60a7c567daabf95cb5d686bf", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-28", "2021-08-29", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01"))),
            Map.entry("5f9ed7381b69c27d1628360b", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-02", "2021-10-03", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("6124a0d98969ac1e165e2258", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ed7381b69c27d1628360d", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-25", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ed78e3a1dc508bbb0e029", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-07", "2021-07-08", "2021-07-09", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("603debf8e2e8bd5cb2e1aef3", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-24", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ed7f83a1dc508bbb0e14c", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-10", "2021-07-11", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-16", "2021-08-17", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-28", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ed78e3a1dc508bbb0e02d", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-07", "2021-08-08", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-28", "2021-08-29", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-12", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-19", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-03", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08", "2021-10-10"))),
            Map.entry("615af0095ac8d77262a24096", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-10-02", "2021-10-03", "2021-10-04", "2021-10-05"))),
            Map.entry("611b7413fa783b70585813f9", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27"))),
            Map.entry("5f998e921f3eb40b669b8c12", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-01", "2021-07-02", "2021-07-05", "2021-07-06", "2021-07-07", "2021-07-08", "2021-07-09", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-28", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-02", "2021-10-04", "2021-10-05", "2021-10-06"))),
            Map.entry("5f9ed7f83a1dc508bbb0e14e", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12"))),
            Map.entry("5f9ed7d33a1dc508bbb0e0e8", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-06", "2021-07-07", "2021-07-08", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-16", "2021-08-17", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("61321f92a15c1d53ad2b61f6", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-09-04", "2021-09-06"))),
            Map.entry("604a3851a3cb9e0b3d698dfb", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9fc2e2a8b95f24a7327d18", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ed7d33a1dc508bbb0e0ec", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ef2343a1dc508bbb12120", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07"))),
            Map.entry("6135c162777d5361dce295e7", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-02", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ed7d33a1dc508bbb0e0ea", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("609d23dae52e901cfaa3ef6d", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-06-30", "2021-07-05", "2021-07-06", "2021-07-07", "2021-07-08", "2021-07-11", "2021-07-13", "2021-07-16", "2021-07-17", "2021-07-18", "2021-07-19", "2021-07-20", "2021-07-27", "2021-08-01", "2021-08-02", "2021-08-03", "2021-08-08", "2021-08-09", "2021-08-11", "2021-08-17", "2021-08-18", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-28", "2021-08-29", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-03", "2021-09-06", "2021-09-08", "2021-09-09", "2021-09-13", "2021-09-14", "2021-09-16", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-26", "2021-09-27", "2021-09-28", "2021-09-29", "2021-10-01", "2021-10-03", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07"))),
            Map.entry("5f9ed78e3a1dc508bbb0e031", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-18", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-28", "2021-08-29", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-04", "2021-09-05", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-11", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-18", "2021-09-19", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5fc8ada64d18a37055865d44", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-26", "2021-08-27", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))),
            Map.entry("5f9ed7381b69c27d16283611", ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of("2021-07-08", "2021-07-09", "2021-07-12", "2021-07-13", "2021-07-14", "2021-07-15", "2021-07-16", "2021-07-17", "2021-07-19", "2021-07-20", "2021-07-21", "2021-07-22", "2021-07-23", "2021-07-24", "2021-07-25", "2021-07-26", "2021-07-27", "2021-07-28", "2021-07-29", "2021-07-30", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-09", "2021-08-10", "2021-08-11", "2021-08-12", "2021-08-13", "2021-08-16", "2021-08-17", "2021-08-18", "2021-08-19", "2021-08-23", "2021-08-24", "2021-08-25", "2021-08-30", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-13", "2021-09-14", "2021-09-15", "2021-09-16", "2021-09-17", "2021-09-20", "2021-09-21", "2021-09-22", "2021-09-23", "2021-09-24", "2021-09-27", "2021-09-28", "2021-09-29", "2021-09-30", "2021-10-01", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08"))));
    // @formatter:on

    @Test
    void findDates() throws JsonProcessingException, InterruptedException, ExecutionException {
        Map<String, NavigableSet<String>> map = userIds.stream()
                .flatMap(u -> getAll(new DateSupplier(firestore, u)).stream()
                        .map(LocalDate::parse)
                        .map(d -> new UserIdDate(u, d)))
                .collect(Collectors.groupingBy(UserIdDate::getUserId,
                        Collectors.mapping(UserIdDate::dateToString, navigableSetCollector)));
        String f = this.formatMap(map);
        log.info("formated: {}", f);
    }

    private String formatMap(Map<String, ? extends Collection<String>> map) {
        return map.entrySet()
                .stream()
                .map(this::formatMapEntity)
                .collect(Collectors.joining(",\n", "Map.ofEntries(", ");"));
    }

    private String formatMapEntity(Map.Entry<String, ? extends Collection<String>> entry) {
        String vf = entry.getValue()
                .stream()
                .map(s -> "\"" + s + "\"")
                .collect(Collectors
                        .joining(", ", "ImmutableSortedSet.copyOf(String.CASE_INSENSITIVE_ORDER,List.of(", "))"));
        return String.format("Map.entry(\"%s\", %s)", entry.getKey(), vf);
    }

    @RequiredArgsConstructor
    private static class DateSupplier implements Supplier<String> {
        final Firestore firestore;
        final String userId;
        final String field = "validationData.date";
        String prev = "";

        @Override
        synchronized public String get() {
            try {
                Objects.requireNonNull(prev);
                log.debug("request userId:{},{}:{}", userId, field, prev);
                return prev = firestore.collection(TimeEntry.COLLECTION_NAME)
                        .whereEqualTo("userId", userId)
                        .whereGreaterThan(field, prev)
                        .orderBy(field)
                        .limit(1)
                        .get()
                        .get()
                        .getDocuments()
                        .stream()
                        .limit(1)
                        .map(s -> s.get(field, String.class))
                        .findFirst()
                        .orElse(null);
            } catch (InterruptedException | ExecutionException e) {
                String m = "Cannot receive next Name after (" + prev + ")";
                log.error(m, e);
                throw new RuntimeException(m, e);
            }
        }
    }

    @Test
    void reevaluate() {
        this.userIdDateMap.entrySet()
                .stream()
                .flatMap(e -> e.getValue().stream().map(LocalDate::parse).map(d -> new UserIdDate(e.getKey(), d)))
                .collect(Collectors.toUnmodifiableList())
                .stream()
                .parallel()
                .map(userIdDateEvaluator::check)
                .filter(UserIdDateEvaluation::hasViolations)
                .forEach(e -> log.info("hasViolations {}", e));
                ;
    }

}
